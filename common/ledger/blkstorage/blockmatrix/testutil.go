package blockmatrix

import (
	"crypto/sha256"
	"github.com/hyperledger/fabric-protos-go/common"
	"github.com/hyperledger/fabric/protoutil"
)

var (
	b1Bytes = []byte{10, 70, 8, 1, 18, 32, 149, 80, 185, 190, 156, 35, 77, 132, 101, 100, 145, 215, 37, 60, 183, 248, 239, 114, 153, 128, 234, 234, 194, 209, 194, 248, 156, 142, 40, 19, 93, 26, 26, 32, 96, 38, 181, 191, 147, 151, 211, 73, 29, 108, 223, 241, 7, 19, 50, 187, 249, 65, 201, 86, 118, 102, 238, 237, 97, 4, 58, 193, 98, 219, 44, 158, 18, 167, 2, 10, 164, 2, 10, 161, 2, 10, 140, 1, 10, 110, 8, 3, 26, 12, 8, 194, 177, 129, 140, 6, 16, 176, 179, 187, 203, 3, 34, 13, 116, 101, 115, 116, 99, 104, 97, 110, 110, 101, 108, 105, 100, 42, 64, 97, 51, 56, 48, 99, 57, 98, 102, 49, 52, 99, 100, 98, 53, 56, 49, 52, 52, 48, 56, 100, 53, 98, 101, 51, 97, 52, 98, 97, 102, 51, 49, 48, 55, 97, 55, 51, 98, 55, 53, 102, 55, 99, 102, 50, 101, 53, 100, 99, 51, 55, 49, 98, 53, 51, 99, 54, 100, 101, 100, 50, 50, 53, 53, 58, 11, 18, 9, 18, 3, 102, 111, 111, 26, 2, 118, 49, 18, 26, 18, 24, 128, 193, 37, 233, 173, 167, 179, 113, 252, 214, 202, 52, 23, 36, 149, 248, 30, 204, 189, 171, 58, 231, 8, 129, 18, 143, 1, 10, 140, 1, 10, 26, 18, 24, 128, 193, 37, 233, 173, 167, 179, 113, 252, 214, 202, 52, 23, 36, 149, 248, 30, 204, 189, 171, 58, 231, 8, 129, 18, 110, 10, 15, 10, 13, 10, 11, 18, 9, 18, 3, 102, 111, 111, 26, 2, 118, 49, 18, 91, 10, 87, 10, 32, 211, 218, 197, 214, 84, 101, 110, 202, 179, 229, 57, 199, 103, 23, 233, 128, 97, 124, 48, 231, 178, 222, 28, 171, 205, 44, 155, 19, 160, 108, 38, 176, 18, 51, 10, 38, 18, 36, 10, 2, 110, 115, 18, 30, 26, 8, 10, 2, 107, 49, 26, 2, 118, 49, 26, 8, 10, 2, 107, 50, 26, 2, 118, 50, 26, 8, 10, 2, 107, 51, 26, 2, 118, 51, 34, 9, 18, 3, 102, 111, 111, 26, 2, 118, 49, 18, 0, 26, 45, 10, 0, 10, 0, 10, 1, 0, 10, 0, 10, 34, 10, 32, 100, 132, 67, 127, 217, 43, 207, 10, 2, 31, 128, 99, 178, 75, 89, 7, 103, 131, 149, 59, 66, 135, 83, 42, 30, 244, 3, 16, 163, 28, 166, 119}
	b2Bytes = []byte{10, 70, 8, 2, 18, 32, 224, 152, 48, 103, 6, 174, 20, 15, 56, 84, 77, 255, 139, 178, 138, 243, 72, 82, 10, 205, 109, 105, 13, 5, 247, 190, 223, 114, 235, 110, 8, 238, 26, 32, 32, 70, 179, 38, 214, 253, 245, 7, 163, 250, 97, 7, 119, 250, 51, 116, 35, 114, 209, 130, 249, 154, 238, 128, 151, 70, 27, 205, 200, 148, 154, 72, 18, 193, 4, 10, 166, 2, 10, 163, 2, 10, 140, 1, 10, 110, 8, 3, 26, 12, 8, 180, 182, 129, 140, 6, 16, 232, 192, 250, 197, 3, 34, 13, 116, 101, 115, 116, 99, 104, 97, 110, 110, 101, 108, 105, 100, 42, 64, 55, 100, 49, 50, 49, 49, 52, 55, 50, 53, 50, 53, 54, 97, 102, 48, 98, 50, 50, 52, 54, 99, 55, 50, 54, 50, 54, 99, 49, 56, 48, 97, 50, 54, 98, 102, 97, 97, 98, 57, 51, 101, 48, 57, 97, 53, 52, 102, 55, 53, 98, 101, 52, 98, 48, 98, 54, 53, 97, 51, 100, 50, 102, 57, 58, 11, 18, 9, 18, 3, 102, 111, 111, 26, 2, 118, 49, 18, 26, 18, 24, 212, 137, 201, 5, 72, 85, 115, 132, 55, 126, 73, 58, 16, 150, 52, 173, 98, 200, 161, 38, 68, 58, 43, 116, 18, 145, 1, 10, 142, 1, 10, 26, 18, 24, 212, 137, 201, 5, 72, 85, 115, 132, 55, 126, 73, 58, 16, 150, 52, 173, 98, 200, 161, 38, 68, 58, 43, 116, 18, 112, 10, 15, 10, 13, 10, 11, 18, 9, 18, 3, 102, 111, 111, 26, 2, 118, 49, 18, 93, 10, 89, 10, 32, 94, 117, 250, 165, 177, 130, 167, 178, 31, 57, 96, 172, 143, 134, 66, 244, 195, 197, 43, 77, 75, 68, 148, 168, 169, 35, 79, 133, 245, 229, 50, 132, 18, 53, 10, 40, 18, 38, 10, 2, 110, 115, 18, 32, 26, 10, 10, 2, 107, 49, 26, 4, 118, 49, 45, 49, 26, 8, 10, 2, 107, 52, 26, 2, 118, 52, 26, 8, 10, 2, 107, 53, 26, 2, 118, 53, 34, 9, 18, 3, 102, 111, 111, 26, 2, 118, 49, 18, 0, 10, 149, 2, 10, 146, 2, 10, 140, 1, 10, 110, 8, 3, 26, 12, 8, 180, 182, 129, 140, 6, 16, 160, 207, 253, 197, 3, 34, 13, 116, 101, 115, 116, 99, 104, 97, 110, 110, 101, 108, 105, 100, 42, 64, 97, 55, 98, 101, 55, 56, 97, 54, 55, 54, 102, 49, 97, 55, 48, 100, 101, 54, 102, 101, 52, 48, 55, 54, 53, 51, 100, 54, 99, 48, 50, 100, 57, 54, 48, 50, 53, 54, 56, 100, 100, 48, 102, 51, 48, 53, 98, 98, 51, 53, 55, 102, 49, 48, 102, 49, 100, 53, 100, 48, 50, 57, 50, 51, 58, 11, 18, 9, 18, 3, 102, 111, 111, 26, 2, 118, 49, 18, 26, 18, 24, 206, 136, 122, 140, 223, 64, 109, 3, 114, 205, 108, 77, 67, 21, 53, 247, 34, 65, 132, 19, 12, 78, 167, 134, 18, 128, 1, 10, 126, 10, 26, 18, 24, 206, 136, 122, 140, 223, 64, 109, 3, 114, 205, 108, 77, 67, 21, 53, 247, 34, 65, 132, 19, 12, 78, 167, 134, 18, 96, 10, 15, 10, 13, 10, 11, 18, 9, 18, 3, 102, 111, 111, 26, 2, 118, 49, 18, 77, 10, 73, 10, 32, 155, 142, 154, 90, 42, 252, 150, 119, 36, 142, 87, 141, 26, 156, 175, 255, 179, 173, 41, 154, 26, 205, 43, 179, 182, 141, 195, 228, 101, 245, 191, 173, 18, 37, 10, 24, 18, 22, 10, 2, 110, 115, 18, 16, 26, 6, 10, 2, 107, 49, 16, 1, 26, 6, 10, 2, 107, 52, 16, 1, 34, 9, 18, 3, 102, 111, 111, 26, 2, 118, 49, 18, 0, 26, 46, 10, 0, 10, 0, 10, 2, 0, 0, 10, 0, 10, 34, 10, 32, 78, 123, 25, 230, 43, 99, 105, 121, 183, 239, 63, 92, 221, 147, 76, 66, 204, 140, 237, 124, 207, 13, 188, 255, 99, 76, 223, 219, 97, 11, 207, 138}
)

func GetTestBlock1() *common.Block {
	return protoutil.UnmarshalBlockOrPanic(b1Bytes)
}

func GetTestBlock2() *common.Block {
	return protoutil.UnmarshalBlockOrPanic(b2Bytes)
}

func CalculateColumnHash(size uint64, col uint64, blocks map[uint64]*common.Block) []byte {
	h := sha256.New()
	blockNums := ColumnBlockNumbers(size, col)

	for _, blockNum := range blockNums {
		block, ok := blocks[blockNum-1]
		if !ok {
			continue
		}

		h.Write(protoutil.BlockDataHash(block.Data))
	}

	return h.Sum(nil)
}

func CalculateRowHash(size uint64, row uint64, blocks map[uint64]*common.Block) []byte {
	h := sha256.New()
	blockNums := RowBlockNumbers(size, row)

	for _, blockNum := range blockNums {
		block, ok := blocks[blockNum-1]
		if !ok {
			continue
		}

		h.Write(protoutil.BlockDataHash(block.Data))
	}

	return h.Sum(nil)
}

func blocksArrToMap(blocks []*common.Block) map[uint64]*common.Block {
	blocksMap := make(map[uint64]*common.Block)
	for _, block := range blocks {
		blocksMap[block.Header.Number] = block
	}

	return blocksMap
}

func CalculateExpectedHashes(size uint64, blocks ...*common.Block) (r [][]byte, c [][]byte) {
	r = make([][]byte, 0)
	c = make([][]byte, 0)
	blocksMap := blocksArrToMap(blocks)

	for i := uint64(0); i < size; i++ {
		hash := CalculateRowHash(size, i, blocksMap)
		r = append(r, hash)

		hash = CalculateColumnHash(size, i, blocksMap)
		c = append(c, hash)
	}

	return
}
